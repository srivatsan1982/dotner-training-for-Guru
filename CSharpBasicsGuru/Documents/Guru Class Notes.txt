A Function is defined as a piece of code for specific purpose.
A Function may or may not return a value.
Functions which do not return a value are called sub-routines.
Function uses the return statement to return a data.
The following is the declaration of the function:
<Access Specifier> Optional<Access Modifier> <Return Type> Function_Name(parameters)
{
	Function Body
}
A Function is used to define the behaviour of the class.
In case of Calculator:
A,B,C are all fields which take input.
Add(),Mul(),Subract()=> The behaviours which act upon the data.

Types of Parameters:
Input Parameters = Used to take Input data.
Out Parameters	 = Used to output multiple results from a function.

Classes are a representation of realtime entity:
Basically the Entity can be divided into three parts:
1. Features : In case of Calculator the Features are exposed via the Properties.
			  Properties: Used to Implement Encapsulation. It will not expose the data stored in a private variable, 
						  rather it will expose itself.
2. Behaviours: Behaviours are exposed via Functions. In case of Calculator, Add,Subract etc.. are the behaviours.
3. Events	  : Events expose the instance when a change is made. For example in a Calculator pressing of the Add button is an Event.
				In case of Human Getting thirsty is an event. In full, they will encapsulate the Behviours.

In simple a Class is a blueprint of the operations and behaviours which it can expose or it can do.... It is a Type...
What about When to Do... and Where to Do..
This question will be answered by the object.
An Object is an Instance of a Class. 
In order to initialize the Class Features, there is an Initializer which we call Constructor.
To create an object of a class, you need to call the constructor using the new keyword.

For Ex: Calculator calc = new Calculator();
This Single line can be represented as two lines:

Calculator calc; Here, We are creating a Variable of Type Calculator. This is stored in Stack
calc = new Calculator(); In this line, we create an object and store it in Heap. Then a pointer is set 
						 between the variable in the Stack and this Object in the Heap. That is why we
						 say object is a reference type as it is always pointing to a memory location.

The object would now expose the behaviours and the functionalities based on the Acces Specifier and Access Modifier which 
has been specified against the feature or function.
Garbage Collector: https://www.geeksforgeeks.org/garbage-collection-in-c-sharp-dot-net-framework/

09/25/2020: Access Specifiers.
Access Specifier is used to control the Access to a field or a Method. It is used to enforce Encapsulation and Code Security 
to ensure that you do not expose the methods which are not necessary.

private - The fields which are declared as private at class level are private to the Class. They can be only accessed
		  within the class and not outside the class.
		  By default if a field or method does not have a access specifier, it means it is private to the class.
		  If a variable is declared inside a method, it is always private to the method. Its scope does not go beyond it
		  and we cannot declare public fields or variables inside a method(private/public).

public  - Global Access through out the solution. Like, a solution can contain multiple projects. A single Windows/Web Application
		  and Class Libraries for writing the business logic. So any class declared in the Class Libraries as public can be accessed
		  at places in the other projects as well.

protected - Access within the class and the inheriting class within the same project. Access would not be provided outside the class or child class.

internal  - Access to the class, or field or method only within the project and not outide the project.
			By default if a class does not have an access specifier, it means it is internal.

protected internal - Access within the class and the inheriting class within the project and not outside the project.

Please refer the link below:
https://stackoverflow.com/questions/614818/in-c-what-is-the-difference-between-public-private-protected-and-having-no#:~:text=public%20-%20can%20be%20access%20by,inherits%20off%20of%20the%20class.&text=Static%20means%20you%20have%20one,every%20instance%20of%20that%20class.
